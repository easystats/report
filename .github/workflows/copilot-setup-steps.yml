# GitHub Copilot Environment Setup for report R Package
# This workflow sets up the development environment before Copilot starts working
# Based on: https://docs.github.com/en/copilot/how-tos/use-copilot-agents/coding-agent/customize-the-agent-environment

name: copilot-setup-steps

on:
  workflow_dispatch:
  # This workflow is automatically triggered by GitHub Copilot
  # before the agent starts working in the repository

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      _R_CHECK_CRAN_INCOMING_: false
      _R_CHECK_FORCE_SUGGESTS_: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Determine if R setup is needed
        id: check_r_needed
        run: |
          echo "Checking if R environment setup is needed..."
          
          # Check if this is likely a documentation-only or configuration change
          # by looking for indicators that suggest R functionality will be needed
          
          R_NEEDED=true
          
          # Get the branch name if available
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "Branch: $BRANCH_NAME"
          
          # PRIORITY: Check user's explicit instructions first
          echo "=== Checking for explicit user instructions ==="
          ISSUE_NUMBER="${COPILOT_AGENT_ISSUE_NUMBER:-}"
          
          if [ -n "$ISSUE_NUMBER" ] && [ "$ISSUE_NUMBER" != "0" ]; then
            echo "Found associated issue #$ISSUE_NUMBER, checking for setup instructions..."
            
            # Fetch issue content using GitHub API
            ISSUE_CONTENT=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$ISSUE_NUMBER" | \
              jq -r '.body // ""')
            
            echo "Issue content length: ${#ISSUE_CONTENT} characters"
            
            # Check for explicit instructions to skip setup
            if echo "$ISSUE_CONTENT" | grep -iE "(do not run|don't run|skip).*(setup|install|dependencies)" > /dev/null; then
              echo "✓ Found explicit instruction to SKIP setup in issue #$ISSUE_NUMBER"
              R_NEEDED=false
            elif echo "$ISSUE_CONTENT" | grep -iE "(no R|no dependencies|just.*text|just.*editing|only.*text|only.*editing)" > /dev/null; then
              echo "✓ Found indication this is text-only work in issue #$ISSUE_NUMBER"
              R_NEEDED=false  
            elif echo "$ISSUE_CONTENT" | grep -iE "(version.*bump|update.*NEWS|changelog|text.*edit)" > /dev/null; then
              echo "✓ Found indication this is version/documentation work in issue #$ISSUE_NUMBER"
              R_NEEDED=false
            else
              echo "No explicit setup instructions found in issue content"
            fi
          else
            echo "No associated issue found, proceeding with file-based analysis"
          fi
          
          # Only run file-based analysis if user instructions didn't determine outcome
          if [ "$R_NEEDED" == "true" ]; then
            echo "=== Running file-based analysis ==="
            
            # Check recent commits for file patterns
            if git log --name-only -10 --pretty=format: | grep -E '\.(R|Rd|Rmd)$' > /dev/null; then
              echo "Found R-related files in recent commits - R setup needed"
              R_NEEDED=true
            elif git log --name-only -5 --pretty=format: | grep -E '^(tests/|R/|man/|vignettes/)' > /dev/null; then
              echo "Found R package structure changes - R setup needed"
              R_NEEDED=true
            elif git log --oneline -5 | grep -iE '(function|package|test|build|check|install)' > /dev/null; then
              echo "Found R development keywords in commit messages - R setup needed"
              R_NEEDED=true
            else
              # Check if recent changes are only to documentation/config files
              RECENT_FILES=$(git log --name-only -5 --pretty=format: | sort -u)
              echo "Recent files changed:"
              echo "$RECENT_FILES"
              
              # If only these types of files changed, skip R setup
              if echo "$RECENT_FILES" | grep -v -E '^(\.github/copilot-instructions\.md|\.github/workflows/|README\.md|\.gitignore|\.Rbuildignore|NEWS\.md|CONTRIBUTING\.md|LICENSE|CITATION\.cff|DESCRIPTION|cran-comments\.md|\.md$|\.yml$|\.yaml$)$' | grep -E '.' > /dev/null; then
                echo "Found changes beyond documentation/config files - R setup needed"
                R_NEEDED=true
              else
                echo "Only documentation/config files changed - R setup can be skipped"
                R_NEEDED=false
              fi
            fi
          else
            echo "=== Skipping file-based analysis (user instructions already determined outcome) ==="
          fi
          
          echo "R_NEEDED=$R_NEEDED" >> $GITHUB_OUTPUT
          echo ""
          echo "=== FINAL DECISION ==="
          if [ "$R_NEEDED" == "true" ]; then
            echo "✓ R setup WILL be run"
            echo "Reason: Analysis indicates R functionality is needed"
          else
            echo "✓ R setup WILL BE SKIPPED"
            echo "Reason: User instructions or file analysis indicates R setup not needed"
          fi
          echo "Decision: R_NEEDED=$R_NEEDED"
        shell: bash
        
      - name: Setup R
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true
          
      - name: Setup pandoc (required for building vignettes)
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install system dependencies
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev \
            r-base-dev

      - name: Setup R user library
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          mkdir -p ~/R/library
          echo 'R_LIBS_USER=~/R/library' >> ~/.Renviron
        shell: bash

      - name: Cache R packages
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.local/share/renv
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install core R development packages
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          # Install essential development packages first
          install.packages(c(
            "rlang",
            "dplyr", 
            "testthat",
            "lintr",
            "styler", 
            "roxygen2",
            "reprex",
            "devtools"
          ), repos = "https://cloud.r-project.org/")
        shell: Rscript {0}
        
      - name: Install report package dependencies (Imports only)
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          # Install only required dependencies (Imports) to save time and resources
          # Suggested packages are NOT installed by default and should be 
          # installed "as necessary" based on the specific PR requirements
          # This follows the copilot instructions philosophy of targeted installation
          tryCatch({
            install.packages("remotes", repos = "https://cloud.r-project.org/")
            remotes::install_deps(dependencies = c("Depends", "Imports"))
          }, error = function(e) {
            cat("Warning: Some dependencies may not have installed:", e$message, "\n")
          })
        shell: Rscript {0}

      - name: Build report package
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          # Build the current package
          system("R CMD build .")
        shell: Rscript {0}
        
      - name: Install report package  
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          # Install the built package
          pkg_file <- list.files(pattern = "report_.*\\.tar\\.gz")[1]
          if (!is.na(pkg_file)) {
            system(paste("R CMD INSTALL", pkg_file))
          } else {
            # Fallback: install from source
            system("R CMD INSTALL .")
          }
        shell: Rscript {0}

      - name: Verify R installation and packages
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          cat("=== R Version ===\n")
          print(R.version.string)
          
          cat("\n=== Core Development Packages ===\n")
          required_packages <- c("rlang", "dplyr", "testthat", "lintr", "styler", "roxygen2", "reprex")
          for (pkg in required_packages) {
            if (requireNamespace(pkg, quietly = TRUE)) {
              cat("✓", pkg, "- version", as.character(packageVersion(pkg)), "\n")
            } else {
              cat("✗", pkg, "- NOT AVAILABLE\n")
            }
          }
          
          cat("\n=== report Package ===\n") 
          if (requireNamespace("report", quietly = TRUE)) {
            library(report)
            cat("✓ report - version", as.character(packageVersion("report")), "\n")
          } else {
            cat("✗ report - NOT AVAILABLE\n")
          }
        shell: Rscript {0}

      - name: Test core report functionality
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          library(report)
          
          cat("=== Testing Core Functions ===\n")
          
          # Test basic report function
          tryCatch({
            data(mtcars)
            model <- lm(mpg ~ wt + hp, data = mtcars)
            result <- report(model)
            cat("✓ report() works\n")
          }, error = function(e) {
            cat("⚠ report() error:", e$message, "\n")
          })
          
          # Test data frame reporting
          tryCatch({
            report_data <- report(mtcars)
            cat("✓ report(data.frame) works\n")
          }, error = function(e) {
            cat("⚠ report(data.frame) error:", e$message, "\n")
          })
          
          # Test sample reporting
          tryCatch({
            sample_report <- report_sample(mtcars)
            cat("✓ report_sample() works\n")
          }, error = function(e) {
            cat("⚠ report_sample() error:", e$message, "\n")
          })
          
          # Test participants reporting
          tryCatch({
            test_data <- data.frame(Age = c(25, 30, 35), Sex = c("F", "M", "F"))
            participants_report <- report_participants(test_data)
            cat("✓ report_participants() works\n")
          }, error = function(e) {
            cat("⚠ report_participants() error:", e$message, "\n")
          })
          
          cat("\n=== Core Function Tests Complete ===\n")
        shell: Rscript {0}

      - name: Test reprex functionality  
        if: steps.check_r_needed.outputs.R_NEEDED == 'true'
        run: |
          library(reprex)
          library(report)
          
          cat("=== Testing reprex Functionality ===\n")
          
          # Test reprex with report function
          test_code <- "
          library(report)
          data(mtcars)
          
          # Test basic model reporting
          model <- lm(mpg ~ wt + hp, data = mtcars)
          result <- report(model)
          print(result)
          "
          
          tryCatch({
            reprex_result <- reprex(input = test_code, venue = "gh", advertise = FALSE, show = FALSE)
            
            if (length(reprex_result) > 0 && any(grepl("library\\(report\\)", reprex_result))) {
              cat("✓ reprex is working correctly with report\n")
              cat("Sample reprex output (first 5 lines):\n")
              cat(paste(head(reprex_result, 5), collapse = "\n"), "\n")
            } else {
              cat("⚠ reprex generated output but may not be working correctly\n")
            }
          }, error = function(e) {
            cat("✗ reprex failed:", e$message, "\n")
          })
          
          cat("\n=== reprex Test Complete ===\n")
        shell: Rscript {0}

      - name: Display environment summary
        run: |
          echo "=== GitHub Copilot Environment Setup Complete ==="
          echo ""
          
          if [ "${{ steps.check_r_needed.outputs.R_NEEDED }}" == "true" ]; then
            echo "✓ Full R development environment configured:"
            echo "  - R and system dependencies installed"
            echo "  - report package built and installed"
            echo "  - Core development tools available (lintr, styler, reprex)"
            echo "  - ONLY required dependencies (Imports) installed to save time"
            echo "  - Suggested packages NOT installed - install as needed per PR"
            echo "  - Package building and testing capabilities verified"
            echo ""
            echo "The environment is ready for R package development work."
            echo "Copilot can now build, test, lint, and create reproducible examples."
          else
            echo "✓ Minimal environment configured:"
            echo "  - Repository checked out and ready"
            echo "  - R setup SKIPPED per user instructions or file analysis"
            echo ""
            if [ -n "${COPILOT_AGENT_ISSUE_NUMBER:-}" ] && [ "${COPILOT_AGENT_ISSUE_NUMBER:-}" != "0" ]; then
              echo "Decision based on issue #${COPILOT_AGENT_ISSUE_NUMBER} analysis"
            else
              echo "Decision based on file change analysis"
            fi
            echo "The environment is ready for documentation and configuration work."
            echo "Perfect for version bumps, NEWS.md updates, and text editing tasks."
          fi
        shell: bash